class HTMLExporter(BaseExporter):
    """HTML exporter for reports with interactive charts."""


def export(self) -> str:
    """
    Export the report as an HTML file with interactive charts.
    
    Returns:
        The path to the exported HTML file
    """
    try:
        # Get export path
        html_path = self._get_export_path("html", "html")
        
        # Generate HTML content
        if self.html_exporter and INTERACTIVE_CHARTS_AVAILABLE:
            html_content = self.html_exporter.generate_html_report(
                self.report.title,
                self.template.sections,
                self.report.data
            )
        else:
            # Fall back to basic HTML generation
            html_content = self._generate_html()
        
        # Write HTML to file
        with open(html_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        logger.info(f"Exported report to HTML: {html_path}")
        return html_path
    
    except Exception as e:
        logger.error(f"Error exporting report to HTML: {e}")
        return ""

def _generate_html(self) -> str:
    """Generate basic HTML content for the report."""
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{self.report.title}</title>
        <style>
            body {{ 
                font-family: Arial, sans-serif; 
                margin: 20px; 
                line-height: 1.6;
                color: #333;
            }}
            h1 {{ 
                color: #2c3e50; 
                border-bottom: 2px solid #3498db;
                padding-bottom: 10px;
            }}
            h2 {{ 
                color: #3498db; 
                margin-top: 30px;
                border-bottom: 1px solid #ddd;
                padding-bottom: 5px;
            }}
            table {{ 
                border-collapse: collapse; 
                width: 100%; 
                margin: 15px 0; 
            }}
            th, td {{ 
                border: 1px solid #ddd; 
                padding: 12px; 
                text-align: left; 
            }}
            th {{ 
                background-color: #f2f2f2; 
                font-weight: bold;
            }}
            tr:nth-child(even) {{ 
                background-color: #f9f9f9; 
            }}
            .chart-placeholder {{ 
                background-color: #f9f9f9; 
                border: 1px solid #ddd; 
                padding: 20px; 
                text-align: center; 
                margin: 15px 0; 
            }}
            .footer {{ 
                margin-top: 30px; 
                font-size: 0.8em; 
                color: #7f8c8d; 
                text-align: center; 
                border-top: 1px solid #eee;
                padding-top: 20px;
            }}
        </style>
    </head>
    <body>
        <h1>{self.report.title}</h1>
        <p>Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}</p>
    """
    
    # Process each section
    for section in self.template.sections:
        html += f"<h2>{section['title']}</h2>"
        
        if section["type"] == "text":
            content = section.get("content", "")
            if "content" in self.report.data.get(section["title"].lower().replace(" ", "_"), {}):
                content = self.report.data[section["title"].lower().replace(" ", "_")]["content"]
            html += f"<p>{content}</p>"
            
        elif section["type"] == "table":
            data_source = section.get("data_source", "")
            if data_source in self.report.data:
                table_data = self.report.data[data_source]
                if table_data and isinstance(table_data, list) and len(table_data) > 0:
                    # Create table header
                    html += "<table><thead><tr>"
                    for key in table_data[0].keys():
                        html += f"<th>{key}</th>"
                    html += "</tr></thead><tbody>"
                    
                    # Create table rows
                    for row in table_data:
                        html += "<tr>"
                        for value in row.values():
                            html += f"<td>{value}</td>"
                        html += "</tr>"
                    
                    html += "</tbody></table>"
                else:
                    html += "<p>No data available for this table.</p>"
            else:
                html += "<p>Data source not found.</p>"
                
        elif section["type"] == "chart":
            # For basic HTML export, we just add a placeholder for charts
            chart_type = section.get("chart_type", "line")
            html += f"""
            <div class="chart-placeholder">
                <p>[{chart_type.upper()} CHART: {section['title']}]</p>
                <p>Interactive charts require the enhanced HTML export feature.</p>
            </div>
            """
            
        elif section["type"] == "analysis":
            analysis_type = section.get("analysis_type", "")
            if analysis_type in self.report.data:
                analysis_data = self.report.data[analysis_type]
                if "recommendations" in analysis_data:
                    html += "<h3>Recommendations</h3>"
                    html += "<ul>"
                    for rec in analysis_data["recommendations"]:
                        html += f"<li>{rec}</li>"
                    html += "</ul>"
                if "analysis" in analysis_data:
                    html += f"<p>{analysis_data['analysis']}</p>"
            else:
                html += f"<p>No analysis data available for {analysis_type}.</p>"
    
    # Add footer
    html += f"""
        <div class="footer">
            <p>Deep Blue Pool Chemistry Report - {datetime.now().strftime('%Y-%m-%d')}</p>
        </div>
    </body>
    </html>
    """
    
    return html